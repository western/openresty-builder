

#lua_package_path "/usr/local/openresty/lualib/resty/?.lua;;";
#lua_package_path "/usr/local/openresty/site/lualib/?.lua;;";

#lua_package_cpath '/bar/baz/?.so;/blah/blah/?.so;;';
lua_package_cpath '/usr/lib64/lua/5.1/?.so;;';



server {
    listen       80;
    #server_name  localhost;
    charset utf-8;

    error_log   /home/andrew/htdocs/openresty.error.log;
    access_log  /home/andrew/htdocs/openresty.access.log  main;

    location / {
        root   /home/andrew/htdocs;
        index  index.html;
    }





    location /api/upload {

        add_header  Content-Type    application/json;
        add_header  Access-Control-Allow-Origin  *;


        set $upload_fold "/home/andrew/htdocs/upload/";
        set $upload_fold_relative "/upload/";

        content_by_lua_block {


            local function my_get_file_name(header)
                local file_name
                for i, ele in ipairs(header) do
                    file_name = string.match(ele, 'filename="(.*)"')
                    if file_name and file_name ~= '' then

                        return file_name:match("^(.+)[.]"):lower(), file_name:match("[.](.+)$"):lower()
                    end
                end
                return nil, nil
            end


            local lfs = require "lfs"
            local cjson = require "cjson"
            local str = require "resty.string"
            local upload = require "resty.upload"
            local chunk_size = 8192
            local form = upload:new(chunk_size)

            local resty_sha1 = require "resty.sha1"
            local sha1 = resty_sha1:new()

            local file
            local file_name_upl
            local result = {}
            --local result_relative_path
            --local result_file_ext
            --local result_file_name_full
            result["relative_path"] = "";
            result["file_name"] = "";
            result["file_ext"] = "";
            result["file_name_full"] = "";
            result["file_name_original"] = "";

            while true do
                local typ, res, err = form:read()

                if not typ then
                    ngx.say(cjson.encode({
                        code=500,
                        msg="failed to read: "..err,

                        user_agent=ngx.req.get_headers()["user-agent"],
                        remote_addr=ngx.var.remote_addr,
                    }))
                    ngx.exit(ngx.OK)
                end



                if typ == "header" then

                    --ngx.log(ngx.ERR, "my_get_file_name: ", my_get_file_name(res))
                    local file_name, file_ext = my_get_file_name(res)




                    if file_name then



                        sha1:update(file_name..os.date("%c"))
                        result["file_name_original"] = file_name
                        file_name = str.to_hex(sha1:final())
                        sha1:reset()

                        local file_name_full = file_name.."."..file_ext

                        --ngx.say('|', file_name, '|', file_ext, '|')
                        --ngx.exit(ngx.OK)

                        local t = os.date ("*t")
                        local year_str = t.year
                        local month_str = t.month
                        file_name_upl = ngx.var.upload_fold.."/"..year_str.."/"..month_str.."/"..file_name_full
                        result["relative_path"] = "/"..year_str.."/"..month_str.."/"..file_name_full
                        result["file_name"] = file_name
                        result["file_ext"] = file_ext
                        result["file_name_full"] = file_name_full


                        if (lfs.attributes(ngx.var.upload_fold.."/"..year_str.."/"..month_str, "mode") ~= "directory") then

                            lfs.mkdir(ngx.var.upload_fold.."/"..year_str)
                            lfs.mkdir(ngx.var.upload_fold.."/"..year_str.."/"..month_str)
                        end


                        file = io.open(file_name_upl, "w+")
                        if not file then

                            ngx.say(cjson.encode({
                                code=500,
                                msg='failed to open file',

                                file_name_full=result["file_name_full"],
                                file_name=result["file_name"],
                                file_ext=result["file_ext"],

                                user_agent=ngx.req.get_headers()["user-agent"],
                                remote_addr=ngx.var.remote_addr,
                            }))
                            ngx.exit(ngx.OK)
                        end
                    end

                elseif typ == "body" then
                    if file then
                        file:write(res)
                    end

                elseif typ == "part_end" then
                    file:close()
                    file = nil



                    ngx.say(cjson.encode({
                        code=200,
                        msg='file uploaded',
                        relative_path=ngx.re.gsub(ngx.var.upload_fold_relative..result["relative_path"], "//", "/"),
                        file_name_full=result["file_name_full"],
                        file_name=result["file_name"],
                        file_ext=result["file_ext"],
                        file_name_original=result["file_name_original"],
                        file_size=lfs.attributes (file_name_upl, "size"),
                        user_agent=ngx.req.get_headers()["user-agent"],
                        remote_addr=ngx.var.remote_addr,
                    }))

                elseif typ == "eof" then
                    break

                else
                    -- do nothing
                end
            end

        }
    }







}


